<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc version="1.3" reference="Macros.LinShare.LinSharePicker" locale="">
  <web>Macros.LinShare</web>
  <name>LinSharePicker</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1546297200000</creationDate>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1546297200000</date>
  <contentUpdateDate>1546297200000</contentUpdateDate>
  <version>1.1</version>
  <title>LinSharePicker</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
{{html clean="false"}}
#set ($discard = $xwiki.jsx.use('Macros.LinShare.LinSharePicker'))
#set ($linShareConfig = $xwiki.getDocument("Macros.LinShare.LinShareConfig"))
#set ($linShareMainConfig = $xwiki.getDocument("xwiki:Macros.LinShare.LinShareConfig"))
#set ($workgroup = $linShareConfig.getValue("workgroup"))
#set ($url = $linShareConfig.getValue("url"))
#if(!$workgroup || $workgroup=="")
 #set ($workgroup = $linShareMainConfig.getValue("workgroup"))
#end
#if(!$url || $url=="")
 #set ($url = $linShareMainConfig.getValue("url"))
#end
&lt;select name="linshareId" type="text" class="suggest-linShare" data-url="${escapetool.xml($url)}" data-workgroup="${escapetool.xml($workgroup)}"
  placeholder="Select a file from LinShare"&gt;&lt;/select&gt;
{{/html}}
{{/velocity}}</content>
  <object>
    <name>Macros.LinShare.LinSharePicker</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>064dfa2d-8910-4c0d-838f-1eedda98218a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'xwiki-selectize': "$xwiki.getSkinFile('uicomponents/suggest/xwiki.selectize.js', true)" +
      "?v=$escapetool.url($xwiki.version)"
  }
});

define('xwiki-suggestLinShare', ['jquery', 'xwiki-selectize'], function($) {
  'use strict';

  var linShareURLTemplate = "&lt;url&gt;/linshare/webservice/rest/user/v2/work_groups/&lt;workgroup&gt;/nodes?flat=true";

  var getSelectizeOptions = function(select) {
    return {
      valueField: 'uuid',
      labelField: 'name',
      searchField: ['name'],
      render: null,
      load: function(text, callback) {
        var suggestions = select.data('suggestions');
        if (!suggestions) {
          // We load once because we load everything and filter on the client side.
          select.data('suggestions', []);
          var workgroup = encodeURIComponent(select.attr('data-workgroup'));
          var url = select.attr('data-url');
          var linShareURL = linShareURLTemplate.replace('&lt;url&gt;', url).replace('&lt;workgroup&gt;', workgroup);
          $.ajax({
	        url: linShareURL,
	        dataType: 'json',
	        xhrFields: {withCredentials: true}
          }).done(function(suggestions) {
            select.data('suggestions', suggestions.filter(function(suggestion) {
              return suggestion.type === 'DOCUMENT';
            }));
            select.data('suggestions').unshift({Â "uuid" : "", name : "---"})
            callback(select.data('suggestions'));
          }).fail(callback);
        } else {
          console.log(suggestions);
          callback(suggestions);
        }
      }
    };
  };

  $.fn.suggestLinShare = function(options) {
    return this.each(function() {
      $(this).xwikiSelectize($.extend(getSelectizeOptions($(this)), options));
    });
  };
});

require(['jquery', 'xwiki-suggestLinShare', 'xwiki-events-bridge'], function($) {
  var init = function(event, data) {
    var container = $((data &amp;&amp; data.elements) || document);
    container.find('.suggest-linShare').suggestLinShare();
  };

  // We listen to xwiki:dom:loaded because the old lightbox widget that is still used in the administration triggers it
  // instead of xwiki:dom:updated.
  $(document).on('xwiki:dom:loaded xwiki:dom:updated', init);
  XWiki.domIsLoaded &amp;&amp; init();
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
